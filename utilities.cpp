#include "utilities.h"

vector<float> cube_vertices {
	0.0, 0.0, 0.0,
	0.0, 0.0, 1.0,
	0.0, 1.0, 0.0,
	0.0, 1.0, 1.0,
	1.0, 0.0, 0.0,
	1.0, 0.0, 1.0,
	1.0, 1.0, 0.0,
	1.0, 1.0, 1.0
};

vector<uint32_t> cube_indices {
	1, 7, 5,
	1, 3, 7,
	1, 4, 3,
	1, 2, 4,
	3, 8, 7,
	3, 4, 8,
	5, 7, 8,
	5, 8, 6,
	1, 5, 6,
	1, 6, 2,
	2, 6, 8,
	2, 8, 4
};

vector<float> arrow_vertices {
	9.500000f, -0.951057f, -0.309017f,
	9.500000f, -0.809018f, -0.587786f,
	9.500000f, -0.587786f, -0.809017f,
	9.500000f, -0.309017f, -0.951057f,
	9.500000f, -0.000000f, -1.000000f,
	9.500000f, 0.309017f, -0.951057f,
	9.500000f, 0.587785f, -0.809017f,
	9.500000f, 0.809017f, -0.587785f,
	9.500000f, 0.951057f, -0.309017f,
	9.500000f, 1.000000f, 0.000000f,
	9.500000f, 0.951057f, 0.309017f,
	9.500000f, 0.809017f, 0.587785f,
	9.500000f, 0.587785f, 0.809017f,
	9.500000f, 0.309017f, 0.951057f,
	9.500000f, 0.000000f, 1.000000f,
	9.500000f, -0.309017f, 0.951057f,
	9.500000f, -0.587785f, 0.809017f,
	9.500000f, -0.809017f, 0.587785f,
	9.500000f, -0.951057f, 0.309017f,
	9.500000f, -1.000000f, 0.000000f,
	12.500000f, 0.000000f, 0.000000f,
	0.000000f, -0.250000f, 0.250000f,
	10.000000f, -0.250000f, 0.250000f,
	0.000000f, 0.250000f, 0.250000f,
	10.000000f, 0.250000f, 0.250000f,
	0.000000f, 0.250000f, -0.250000f,
	10.000000f, 0.250000f, -0.250000f,
	0.000000f, -0.250000f, -0.250000f,
	10.000000f, -0.250000f, -0.250000f
};

vector<uint32_t> arrow_indices {
	1, 20, 2,
	20, 19, 2,
	19, 18, 2,
	18, 17, 2,
	17, 16, 2,
	16, 15, 2,
	15, 14, 2,
	14, 13, 2,
	13, 12, 2,
	12, 11, 2,
	11, 10, 2,
	10, 9, 2,
	9, 8, 2,
	8, 7, 2,
	7, 6, 2,
	6, 5, 2,
	5, 4, 2,
	4, 3, 2,
	1, 2, 21,
	2, 3, 21,
	3, 4, 21,
	4, 5, 21,
	5, 6, 21,
	6, 7, 21,
	7, 8, 21,
	8, 9, 21,
	9, 10, 21,
	10, 11, 21,
	11, 12, 21,
	12, 13, 21,
	13, 14, 21,
	14, 15, 21,
	15, 16, 21,
	16, 17, 21,
	17, 18, 21,
	18, 19, 21,
	19, 20, 21,
	20, 1, 21,
	22, 23, 24,
	24, 23, 25,
	24, 25, 26,
	26, 25, 27,
	26, 27, 28,
	28, 27, 29,
	28, 29, 22,
	22, 29, 23,
	23, 29, 25,
	25, 29, 27,
	28, 22, 26,
	26, 22, 24
};

vector<float> torus_vertices {
	0.000000f, 2.508359f, 0.000150f,
	0.386087f, 2.477580f, 0.000193f,
	0.767541f, 2.386000f, 0.000365f,
	1.129976f, 2.235874f, -0.000365f,
	1.464463f, 2.030901f, -0.000247f,
	1.762767f, 1.776128f, -0.000129f,
	2.017543f, 1.477824f, -0.000193f,
	2.222518f, 1.143337f, 0.000193f,
	2.372644f, 0.780903f, 0.000139f,
	2.464222f, 0.399447f, 0.000145f,
	2.495001f, 0.000000f, 0.000135f,
	0.000000f, 3.258357f, -0.000075f,
	0.503411f, 3.218344f, 0.000526f,
	0.999303f, 3.099291f, -0.000526f,
	1.470468f, 2.904128f, 0.000418f,
	1.905302f, 2.637663f, 0.000354f,
	2.293099f, 2.306456f, -0.000354f,
	2.624307f, 1.918662f, -0.000274f,
	2.890774f, 1.483830f, 0.000274f,
	3.085936f, 1.012666f, 0.000274f,
	3.204989f, 0.516772f, 0.000215f,
	3.245003f, 0.000000f, -0.000064f
};

vector<uint32_t> torus_indices {
	12, 1, 13,
	13, 1, 2,
	13, 2, 14,
	14, 2, 3,
	14, 3, 15,
	15, 3, 4,
	15, 4, 16,
	16, 4, 5,
	16, 5, 17,
	17, 5, 6,
	17, 6, 18,
	18, 6, 7,
	18, 7, 19,
	19, 7, 8,
	19, 8, 20,
	20, 8, 9,
	20, 9, 21,
	21, 9, 10,
	21, 10, 22,
	22, 10, 11
};


vec3 toVec3(const aiColor4D & a) {
	return vec3(a.r, a.g, a.b);
}

vec3 toVec3(btVector3& a) {
	return vec3(a[0], a[1], a[2]);
}

btVector3 toBtVec3(vec3& a) {
	return btVector3(a.x, a.y, a.z);
}

void throwError(string type, string name, string msg) {
	throw "ERROR: Failed to " + type + " " + name + ": " + msg;
}

void reportInfo(string msg) {
	cout << "INFO: " << msg << endl;
}

void reportWarning(string msg) {
	cout << "WARNING: " << msg << endl;
}

string getFormatDate() {
	time_t rawtime;
	time(&rawtime);
	tm *timeinfo = localtime(&rawtime);
	return to_string(timeinfo->tm_year + 1900)
		+ "-" + to_string(timeinfo->tm_mon + 1)
		+ "-" + to_string(timeinfo->tm_mday);
}

string getFormatTime() {
	time_t rawtime;
	time(&rawtime);
	tm *timeinfo = localtime(&rawtime);
	return to_string(timeinfo->tm_hour)
		+ "." + to_string(timeinfo->tm_min)
		+ "." + to_string(timeinfo->tm_sec);
}

vec3 minVec3(vec3 v1, vec3 v2) {
	return vec3(min(v1[0], v2[0]), min(v1[1], v2[1]), min(v1[2], v2[2]));
}

vec3 maxVec3(vec3 v1, vec3 v2) {
	return vec3(max(v1[0], v2[0]), max(v1[1], v2[1]), max(v1[2], v2[2]));
}
